3 文件 I/O
	不带缓冲的IO：open，read，write，lseek，close
4. 文件和目录
	4.2 stat, fstat and lstat返回文件有关信息
	4.4 设置用户ID和设置组ID
		实际用户ID和实际组ID标识我们究竟是谁
		有效用户ID，有效组ID以及附加组ID决定了我们的文件访问权限。
		保存的设置用户ID和保存的设置组ID在执行一个程序时包含了有效用户ID和有效组ID的副本。
	4.6 新文件和目录的所有权
		新文件的用户ID设置为进程的有效用户ID
		组ID可以时进程的有效组ID，可以时它所在目录的组ID
	4.7 access 函数
		按照实际用户ID和组ID进行访问权限测试
		int access(const char* pathname, int mode); mode={R_OK, W_OK, X_OK, F_OK[测试文件是否存在]}, 成功返回0,出错返回-1
	4.8 umask
	4.9 chmod && fchmod
		更改现有文件的访问权限, chmod函数在指定的文件上进行操作，fchmod函数则对已打开的文件进行操作。
	4.10 粘住位
		如果对一个目录设置了粘住位，则只有对该目录具有写权限的用户在满足下列条件之一的情况下，才能删除或更名该目录下的文件：
			拥有此文件
			拥有此目录
			超级用户
	4.11 chown, fchown && lchown
	4.12 文件长度
		stat 结构成员st_size表示以字节为单位的文件长度。此字段只对普通文件，目录文件和符号链接有意义。
	4.13 文件截短
		truncate(const char* pathname, off_t length);
		ftruncate(int filedes, off_t length);将现有的文件长度截短为length字节，如果该文件以前的长度大于length，则超过length以外的数据就不再能访问，如果以前的长度短于length，则其效果与系统有关。遵循XSI的系统将增加该文件的长度。
	4.14 文件系统
	4.15 link, unlink, remove and rename
		unlink可以用来删除一个已有项
	4.16 符号链接
		考虑命令是否跟随符号链接[使用的是符号链接本身，还是符号链接所指向的文件]
		使用符号链接可能在文件系统中引入循环[目录A里面有一个指向A的符号链接]
	4.17 symlink && readlink
		symlink创建一个符号链接, readlink读取链接中的名字
	4.18 文件的时间
		修改时间：文件被修改的最后时间
		更改状态时间：该文件的i节点最后一次被修改的时间
	4.19 utime
		访问和修改时间可以用utime函数更改
	4.20 mkdir && rmdir
	4.21 读目录
		DIR* opendir(const char* pathname);
		struct dirent* readdir(DIR* dp);
		void rewinddir(DIR* dp);
		int closedir(DIR* dp);
		long telldir(DIR* dp);
		void seekdir(DIR* dp, long loc);
	4.22 chdir, fchdir, getcwd
	4.23 设备特殊文件
	4.24 文件访问权限位小结
	4.25 小结
		本章内容围绕stat函数，详细介绍了stat结构中的每一个成员。这使我们对UNIX文件的各个属性都有所了解。对文件的所有属性以及操作文件的所有函数有完整的了解对UNIX编程是非常重要的。
5 标准I/O库
	5.2 流和FILE对象
		对于标准I/O库，所有I/O函数的操作都是围绕流(stream)进行的。
		freopen函数清除一个流的定向，fwide函数设置流的定向
	5.3 标准输入，标准输出和标准出错
	5.4 缓冲
		标准I/O提供三种缓冲：
			全缓冲：在填满标准I/O缓冲区后才进行实际I/O操作
			行缓冲：当输入和输出中遇到换行符时
				行缓冲有两个限制：
					一，因为标准I/O库用来收集每一行的缓冲区长度是固定的，所以只要填满流缓冲区，那么即使还没有写一个换行符，也进行I/O操作。
					二，任何时候只要通过标准I/O库要求从(a)一个不带缓冲的流，或者(b)一个行缓冲的流（它要求从内核得到数据）得到输入数据，那么就会造成冲洗所有行缓冲区输出流。
			不带缓冲
		setbuf/setvbuf两个函数给指定的流设置指定的缓冲类型
		任何时候都可以用fflush强制冲洗一个流
	5.5 打开流
		FILE* fopen(const char* restrict pathname, const char* restrict type);     打开指定文件
		FILE* freopen(const char* restrict pathname, const char* restrict type);   在一个指定的流上打开一个指定的文件
		FILE* fdopen(int filedes, const char* type);  获取一个现有的文件描述符
	5.6 读和写流
		int getc(FILE* fp)
		int fgetc(FILE* fp)
		int getchar(void);  <= int getc(stdin)
		int ferror(FILE* fp);
		int feof(FILE* fp);
		void clearerr(FILE* fp);
		int ungetc(int c, FILE* fp); //从流中读取数据以后，可以调用ungetc将字符再压送会流中
		int putc(int c, FILE* fp);
		int fputc(int c, FILE* fp);
		int putchar(int c);  ==> int putc(int c, stdout);
	5.7 每次一行I/O
		char* fgets(char* restrict buf, int n, FILE* restrict fp);
		char* gets(char* buf);
		int fputs(const char* restrict str, FILE* restrict fp);
		int puts(const char* str);
	5.8 标准I/O的效率
	5.9 二进制I/O
		size_t fread(void* restrict ptr, size_t size, size_t nobj, FILE* restrict fp);
		size_t fwrite(const void* restrict ptr, size_t size, size_t nobj, FILE *restrict fp);
		if(fwrite(&data[2], sizeof(float), 4, fp) != 4)
			err_sys("fwrite error");
	5.10 定位流
		ftell && fseek
		ftello && fseeko
		fgetpos && fsetpos
	5.11 格式化I/O
		int printf(const char* restrict format, ...)
		int fprintf(FILE* restrict fp, const char* restrict format, ...);
		int sprintf(char* restrict buf, const char* restrict format, ...);
		int snprintf(char* restrict buf, size_t n, const char* restrict format, ...)
		int scanf(const char* restrict format, ...)
		int fscanf(FILE* restrict fp, const char* restrict format, ...);
		int sscanf(const char* restrict buf, const char* restrict format, ...);
	5.12 实现细节
	5.13 临时文件
		char* tmpnam(char* ptr);
		FILE* tmpfile(void);
		char* tempnam(const char* directory, const char* prefix);
		int mkstemp(char* template);
	5.14 标准I/O的替代软件
		sfio
6 系统数据文件和信息
	6.2 口令文件
		struct passwd* getpwuid(uid_t uid);
		struct passwd* getpwnam(const char* name);
		struct passwd* getpwent(void);  返回口令文件中的下一个记录项
		void setpwent(void);
		void endpwent(void);
	6.3 阴影口令
		struct spwd* getspnam(const char* name);
		struct spwd* getspent(void);
		void setspent(void);
		void endspent(void);
	6.4 组文件
	6.5 附加组ID
		int getgroups(int gidsetsize, gid_t grouplist[]);
	6.6 实现的区别
	6.7 其他数据文件
		一般情况，对于每个数据文件至少有三个函数：
			get函数：读下一个记录，如果需要，还可打开该文件
			set函数：打开相应数据文件（如果尚未打开），然后反绕该文件
			end函数：关闭相应数据文件
	6.8 登陆账户记录
	6.9 系统标识
		int uname(struct utsname* uname);
	6.10 时间和日期例程
		time_t time(time_t *calptr);
		int gettimeofday(struct timeval* restrict tp, void *restrict tzp);
		localtime, mktime, ctime, strftime把上面得到的时间转为人可读的时间和日期
7 进程环境
	7.2 main函数
	7.3 进程终止
		8种方式使进程终止[5种正常终止，3种异常终止]
		_exit和_Exit立即进入内核，exit则先执行一些清理处理（包括调用执行各终止处理程序，关闭所有标准I/O流等），然后进入内核
	7.4 命令行参数
	7.5 环境表
		每个程序都会接受到一张环境表
	7.6 C程序的存储空间布局
		C程序一直由下面几部分组成：
			正文段
			初始化数据段
			非初始化数据段
			桟
			堆
	7.7 共享库
	7.8 存储器分配
	7.9 环境变量
		char* getenv(const char* name);
		int putenv(char* str);
		int setenv(const char* name, const char* value, int rewrite);
		int unsetenv(const char* name);
	7.10 setjmp && longjmp
		int setjmp(jmp_buf env);
		void longjmp(jmp_buf env, int val)
	7.11 getrlimit && setrlimit
8 进程控制
	8.2 近臣标识符
	8.3 fork函数
	8.4 vfork函数
	8.5 exit函数
	8.6 wait && waitpid
		2次fork避免僵死进程
	8.7 waitid函数
	8.8 wait3 && wait4
	8.9 竞争条件
	8.10 exec函数
	8.11 更改用户ID和组ID
	8.12 解释器文件
	8.13 system函数
		不要再一个设置用户ID程序中调用system，这是一个安全性方面的漏洞
	8.14 进程会计(process accounting)
		会计记录对应于进程而不是程序,记录顺序与进程终止顺序一致
	8.15 用于标识
		char* getlogin(void);
	8.16 进程时间
9 进程关系
	9.2 终端登陆
	9.3 网络登陆
	9.4 进程组
		pid_t getpgrp(void);
	9.5 会话
		pid_t setsid(void);
		pid_t getsid(pid_t pid); 返回会话首进程的进程组ID
	9.6 终端控制
	9.7 tcgetpgrp, tcsetpgrp, tcgetsid
		pid_t tcgetpgrp(int filedes); 成功则返回前台进程组ID
		int tcsetpgrp(int filedes, pid_t pgrpid);
	9.8 作业控制
		只有前台作业接受终端输入，如果后台作业企图接受终端输入，则会Stopped，直到变成前台作业。
		后台作业输出到控制终端，是可以允许或禁止的[stty命令]
	9.9 shell执行程序
	9.10 孤儿进程组
	9.11 FreeBSD实现
