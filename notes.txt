3 文件 I/O
	不带缓冲的IO：open，read，write，lseek，close
4. 文件和目录
	4.2 stat, fstat and lstat返回文件有关信息
	4.4 设置用户ID和设置组ID
		实际用户ID和实际组ID标识我们究竟是谁
		有效用户ID，有效组ID以及附加组ID决定了我们的文件访问权限。
		保存的设置用户ID和保存的设置组ID在执行一个程序时包含了有效用户ID和有效组ID的副本。
	4.6 新文件和目录的所有权
		新文件的用户ID设置为进程的有效用户ID
		组ID可以时进程的有效组ID，可以时它所在目录的组ID
	4.7 access 函数
		按照实际用户ID和组ID进行访问权限测试
		int access(const char* pathname, int mode); mode={R_OK, W_OK, X_OK, F_OK[测试文件是否存在]}, 成功返回0,出错返回-1
	4.8 umask
	4.9 chmod && fchmod
		更改现有文件的访问权限, chmod函数在指定的文件上进行操作，fchmod函数则对已打开的文件进行操作。
	4.10 粘住位
		如果对一个目录设置了粘住位，则只有对该目录具有写权限的用户在满足下列条件之一的情况下，才能删除或更名该目录下的文件：
			拥有此文件
			拥有此目录
			超级用户
	4.11 chown, fchown && lchown
	4.12 文件长度
		stat 结构成员st_size表示以字节为单位的文件长度。此字段只对普通文件，目录文件和符号链接有意义。
	4.13 文件截短
		truncate(const char* pathname, off_t length);
		ftruncate(int filedes, off_t length);将现有的文件长度截短为length字节，如果该文件以前的长度大于length，则超过length以外的数据就不再能访问，如果以前的长度短于length，则其效果与系统有关。遵循XSI的系统将增加该文件的长度。
	4.14 文件系统
	4.15 link, unlink, remove and rename
		unlink可以用来删除一个已有项
	4.16 符号链接
		考虑命令是否跟随符号链接[使用的是符号链接本身，还是符号链接所指向的文件]
		使用符号链接可能在文件系统中引入循环[目录A里面有一个指向A的符号链接]
	4.17 symlink && readlink
		symlink创建一个符号链接, readlink读取链接中的名字
	4.18 文件的时间
		修改时间：文件被修改的最后时间
		更改状态时间：该文件的i节点最后一次被修改的时间
	4.19 utime
		访问和修改时间可以用utime函数更改
	4.20 mkdir && rmdir
	4.21 读目录
		DIR* opendir(const char* pathname);
		struct dirent* readdir(DIR* dp);
		void rewinddir(DIR* dp);
		int closedir(DIR* dp);
		long telldir(DIR* dp);
		void seekdir(DIR* dp, long loc);
	4.22 chdir, fchdir, getcwd
	4.23 设备特殊文件
	4.24 文件访问权限位小结
	4.25 小结
		本章内容围绕stat函数，详细介绍了stat结构中的每一个成员。这使我们对UNIX文件的各个属性都有所了解。对文件的所有属性以及操作文件的所有函数有完整的了解对UNIX编程是非常重要的。
5 标准I/O库
	5.2 流和FILE对象
		对于标准I/O库，所有I/O函数的操作都是围绕流(stream)进行的。
		freopen函数清除一个流的定向，fwide函数设置流的定向
	5.3 标准输入，标准输出和标准出错
	5.4 缓冲
		标准I/O提供三种缓冲：
			全缓冲：在填满标准I/O缓冲区后才进行实际I/O操作
			行缓冲：当输入和输出中遇到换行符时
				行缓冲有两个限制：
					一，因为标准I/O库用来收集每一行的缓冲区长度是固定的，所以只要填满流缓冲区，那么即使还没有写一个换行符，也进行I/O操作。
					二，任何时候只要通过标准I/O库要求从(a)一个不带缓冲的流，或者(b)一个行缓冲的流（它要求从内核得到数据）得到输入数据，那么就会造成冲洗所有行缓冲区输出流。
			不带缓冲
		setbuf/setvbuf两个函数给指定的流设置指定的缓冲类型
		任何时候都可以用fflush强制冲洗一个流
	5.5 打开流
		FILE* fopen(const char* restrict pathname, const char* restrict type);     打开指定文件
		FILE* freopen(const char* restrict pathname, const char* restrict type);   在一个指定的流上打开一个指定的文件
		FILE* fdopen(int filedes, const char* type);  获取一个现有的文件描述符
	5.6 读和写流
		int getc(FILE* fp)
		int fgetc(FILE* fp)
		int getchar(void);  <= int getc(stdin)
		int ferror(FILE* fp);
		int feof(FILE* fp);
		void clearerr(FILE* fp);
		int ungetc(int c, FILE* fp); //从流中读取数据以后，可以调用ungetc将字符再压送会流中
		int putc(int c, FILE* fp);
		int fputc(int c, FILE* fp);
		int putchar(int c);  ==> int putc(int c, stdout);
	5.7 每次一行I/O
		char* fgets(char* restrict buf, int n, FILE* restrict fp);
		char* gets(char* buf);
		int fputs(const char* restrict str, FILE* restrict fp);
		int puts(const char* str);
	5.8 标准I/O的效率
	5.9 二进制I/O
		size_t fread(void* restrict ptr, size_t size, size_t nobj, FILE* restrict fp);
		size_t fwrite(const void* restrict ptr, size_t size, size_t nobj, FILE *restrict fp);
		if(fwrite(&data[2], sizeof(float), 4, fp) != 4)
			err_sys("fwrite error");
	5.10 定位流
		ftell && fseek
		ftello && fseeko
		fgetpos && fsetpos
	5.11 格式化I/O
		int printf(const char* restrict format, ...)
		int fprintf(FILE* restrict fp, const char* restrict format, ...);
		int sprintf(char* restrict buf, const char* restrict format, ...);
		int snprintf(char* restrict buf, size_t n, const char* restrict format, ...)
		int scanf(const char* restrict format, ...)
		int fscanf(FILE* restrict fp, const char* restrict format, ...);
		int sscanf(const char* restrict buf, const char* restrict format, ...);
	5.12 实现细节
	5.13 临时文件
		char* tmpnam(char* ptr);
		FILE* tmpfile(void);
		char* tempnam(const char* directory, const char* prefix);
		int mkstemp(char* template);
	5.14 标准I/O的替代软件
		sfio
6 系统数据文件和信息
	6.2 口令文件
		struct passwd* getpwuid(uid_t uid);
		struct passwd* getpwnam(const char* name);
		struct passwd* getpwent(void);  返回口令文件中的下一个记录项
		void setpwent(void);
		void endpwent(void);
	6.3 阴影口令
		struct spwd* getspnam(const char* name);
		struct spwd* getspent(void);
		void setspent(void);
		void endspent(void);
	6.4 组文件
	6.5 附加组ID
		int getgroups(int gidsetsize, gid_t grouplist[]);
	6.6 实现的区别
	6.7 其他数据文件
		一般情况，对于每个数据文件至少有三个函数：
			get函数：读下一个记录，如果需要，还可打开该文件
			set函数：打开相应数据文件（如果尚未打开），然后反绕该文件
			end函数：关闭相应数据文件
	6.8 登陆账户记录
	6.9 系统标识
		int uname(struct utsname* uname);
	6.10 时间和日期例程
		time_t time(time_t *calptr);
		int gettimeofday(struct timeval* restrict tp, void *restrict tzp);
		localtime, mktime, ctime, strftime把上面得到的时间转为人可读的时间和日期
7 进程环境
	7.2 main函数
	7.3 进程终止
		8种方式使进程终止[5种正常终止，3种异常终止]
		_exit和_Exit立即进入内核，exit则先执行一些清理处理（包括调用执行各终止处理程序，关闭所有标准I/O流等），然后进入内核
		atexit函数，注册一个进程退出时执行的函数
	7.4 命令行参数
	7.5 环境表
		每个程序都会接受到一张环境表
	7.6 C程序的存储空间布局
		C程序一直由下面几部分组成：
			正文段
			初始化数据段
			非初始化数据段
			桟
			堆
	7.7 共享库
	7.8 存储器分配
	7.9 环境变量
		char* getenv(const char* name);
		int putenv(char* str);
		int setenv(const char* name, const char* value, int rewrite);
		int unsetenv(const char* name);
	7.10 setjmp && longjmp
		int setjmp(jmp_buf env);
		void longjmp(jmp_buf env, int val)
	7.11 getrlimit && setrlimit
8 进程控制
	8.2 近臣标识符
	8.3 fork函数
	8.4 vfork函数
	8.5 exit函数
	8.6 wait && waitpid
		2次fork避免僵死进程
	8.7 waitid函数
	8.8 wait3 && wait4
	8.9 竞争条件
	8.10 exec函数
	8.11 更改用户ID和组ID
	8.12 解释器文件
	8.13 system函数
		不要再一个设置用户ID程序中调用system，这是一个安全性方面的漏洞
	8.14 进程会计(process accounting)
		会计记录对应于进程而不是程序,记录顺序与进程终止顺序一致
	8.15 用于标识
		char* getlogin(void);
	8.16 进程时间
9 进程关系
	9.2 终端登陆
	9.3 网络登陆
	9.4 进程组
		pid_t getpgrp(void);
	9.5 会话
		pid_t setsid(void);
		pid_t getsid(pid_t pid); 返回会话首进程的进程组ID
	9.6 终端控制
	9.7 tcgetpgrp, tcsetpgrp, tcgetsid
		pid_t tcgetpgrp(int filedes); 成功则返回前台进程组ID
		int tcsetpgrp(int filedes, pid_t pgrpid);
	9.8 作业控制
		只有前台作业接受终端输入，如果后台作业企图接受终端输入，则会Stopped，直到变成前台作业。
		后台作业输出到控制终端，是可以允许或禁止的[stty命令]
	9.9 shell执行程序
	9.10 孤儿进程组
	9.11 FreeBSD实现
10 信号
	信号是软件中断
	10.2 信号概念
		p236-p240 有大部分信号及其详细说明
	10.3 signal函数
		void (*signal(int signo, void (*func)(int)))(int);
		因为signal的语义与实现有关，所以最好使用sigaction函数代替signal函数
		"kill -USR1 pid" 向pid所对应的进程发送SIGUSR1
	10.4 不可靠的信号
	10.5 中断的系统调用
	10.6 可重入函数
		p246,表10-3信号处理程序可以调用的可重入函数
	10.7 SIGCLD语义
		SIGCLD和SIGCHLD不同，POSIX.1采用SIGCHLD
	10.8 可靠信号术语和语义
		当引发信号的事件发生时，为进程产生一个信号
	10.9 kill和raise函数
	10.10 alarm和pause函数
	10.11 信号集
		int sigemptyset(sigset_t *set)
		int sigfillset(sigset_t *set)
		int sigaddset(sigset_t *set, int signo);
		int sigdelset(sigset_t *set, int signo);
		int sigismember(const sigset_t *set, int signo);
	10.12 sigprocmask函数
		int sigprocmask(int how, const sigset_t *restrict set, sigset_t *restrict oset);  检测或更改其信号屏蔽字
	10.13 sigpending函数
	10.14 sigaction函数
		int sigaction(int signo, const struct sigaction *restrict act, struct sigaction *restrict oact);
	10.15 sigsetjmp 和 siglongjmp函数
		longjmp有可能导致屏蔽信号[在信号处理程序中]，信号处理程序中进行非局部转移时应当使用sigsetjmp和siglongjmp函数
	10.16 sigsuspend函数
	10.17 abort函数
	10.18 system函数
		实现system函数，用信号
	10.19 sleep函数
		POSIX.1 sleep函数的实现
	10.20 作业控制信号
	10.21 其他特征
		信号名字
		信号映射
11 线程
	11.2 线程概念
	11.3 线程标识
	11.4 线程创建
		int pthread_creat(pthread_t *restrict tidp, const pthread_attr_t *restrict attr, void *(*start_rtn)(void *), void *restrict arg);
	11.5 线程终止
		进程中的任一线程调用了exit, _Exit或者_exit，那么整个进程就会终止。
		void pthread_exit(void *rval_ptr); //rval_ptr可以通过pthread_join函数访问到
		int pthread_cancel(pthread_t tid);
		线程清理函数void pthread_cleanup_push(void (*rtn)(void*), void *art)
		void thread_clean_pop(int execute)和进程清理函数atexit类似
		如果线程是通过从它的启动例程中返回而终止的话，那么它的清理处理程序就不会被调用[程序11-4中thread 1的清理函数没有被调用]
	11.6 线程同步
		互斥量
			pthread_mutex_lock()
			pthread_mutex_unlock()
		避免死锁
		读写锁
			pthread_rwlock_init
			pthread_rwlock_destory
			pthread_rwlock_rdlock
			pthread_rwlock_wrlock
			pthread_rwlock_unlock
			非常适合对数据结构读的次数远大于写的情况[可以有多个线程拥有读锁]
		条件变量
			pthread_cond_wait()
			pthread_cond_timedwait()
			pthread_cond_signal()通知条件变量已满足
			pthread_cond_broadcast()广播条件变量已满足
12 线程控制
	12.2 线程限制
	12.3 线程属性
		int pthread_attr_init(pthread_attr_t *attr);
		int pthread_attr_destroy(pthread_attr_t *attr);
	12.4 同步属性
		int pthread_mutexattr_init();
		int pthread_mutexattr_destroy();
		进程共享属性，锁类型属性
	12.5 重入
		线程安全：如果一个函数在同一时刻可以被多个线程安全地调用。
		线程安全也并不代表信号处理程序是可重入的
	12.6 线程私有数据
		一：有时候需要维护基于每个线程的数据
		二：它提供了让基于进程的接口适应多线程环境的机制
		int pthread_key_create();
		int pthread_key_delete();
		void* pthread_getspecific(pthread_key_t key);
		int pthread_setspecific(pthread_key_t key, const void* value);
		int pthread_once(pthread_once_t *initflag, void (*initfn)(void));
	12.7 取消选项
		int pthread_setcancelstate(int state, int *oldstate);
		pthread_cancel调用并不等待线程终止，在默认情况下，线程在取消请求发出以后还是继续运行，直到线程到达某个取消点。可以调用pthread_testcancel在程序中自己添加取消点
	12.8 线程和信号
		每个线程都有自己的信号屏蔽字，但是信号的处理是进程中所有线程共享的
	12.9 线程和fork
	12.10 线程和IO
		pread&&pwrite使read和write成为原子操作
13 守护进程
	13.2 守护进程的特征
		无控制终端，后台运行
	13.3 编程规则
		1. 调用umask将文件模式创建屏蔽字设置为0
		2. 调用fork，然后使父进程退出
		3. 调用setsid以创建一个新会话
		4. 将当前工作目录更改为根目录
		5. 关闭不再需要的文件描述符
		6. 某些守护进程打开/dev/null使其具有文件描述符0,1,2,这样，任何一个试图读标准输入，写标准输出或标准出错的库例程都不会产生任何效果
	13.4 出错处理
		3种方法产生日志消息
			1.内核例程可以调用log函数
			2.大多数用户进程（守护进程）调用syslog函数以产生日志消息。
			3.在此主机上的一个用户进程，或通过TCP/IP网络连接到此主机的其他主机上的一个用户进程可将日志消息发向UDP514.
		syslog函数
			void openlog(const char* ident, int option, int facility);
			void syslog(int priority, const char* format, ...)
			void closelog(void);
			int setlogmask(int maskpri);
	13.5 单实例守护进程
		文件锁和记录锁机制是一种方法的基础，该方法用来保证一个守护进程只有一个副本在运行。
	13.6 守护进程的惯例
		守护进程遵守下列公共惯例
			1.若守护进程使用锁文件，那么该文件通常存放在/var/run/目录中
			2.若守护进程支持配置选项，那么配置文件通常存放在/etc目录中
			3.守护进程可用命令启动，但通常它们是由系统初始化脚本之一（/etc/rc*或/etc/init.d/*）启动的
			4. 若一守护进程有一配置文件，那么当该守护进程启动时，它读该文件,但此后一般就不会再查看它。
	13.7 客户进程-服务器进程模型
		守护进程常常用作服务器进程
14 高级I/O
	14.2 非阻塞I/O
		非阻塞I/O使我们可以调用open，read和write这样的I/O操作，并使这些操作不会永远阻塞,如果操作不能完成，立即返回出错信息
		给定的描述符有两种方法对其指定非阻塞I/O：
		1. 如果调用open获得描述符，则可指定O_NONBLOCK标志
		2. 对于已经打开的一个描述符，则可调用fcntl，由该函数打开O_NONBLOCK文件状态标志
	14.3 记录锁
		解决多进程同时编辑文件
		对于有些应用程序（例如数据库），进程有时需要确保它正在单独写一个文件。为了向进程提供这种功能，商用UNIX系统提供流记录锁机制
		记录锁的功能是：当一个进程正在读或修改文件的某个部分时，它可以阻止其他进程修改同一文件区
		fcntl记录锁
		在文件尾端加锁时注意SEEK_END的变化
	14.4 STREAMS
		流在用户进程和设备驱动程序之间提供了一条全双工通路。
		所有STREAMS设备都是字符特殊文件
		STREAMS的所有输入和输出都基于消息
		在我们使用的函数(read, write, getmsg, putmsg, getpmsg, putpmsg)中，只涉及三种消息类型：
			M_DATA（I/O的用户数据）
			M_PROTO（协议控制消息）
			M_PCPROTO（高优先级协议控制消息）
			int putmsg(int filedes, const struct strbuf *ctlptr, const struct strbuf *dataptr, int flag);
			int putpmsg(int filedes, const struct strbuf *ctlptr, const struct strbuf *dataptr, int band, int flag);
		Linux不支持STREAMS
	14.5 I/O多路转换
		处理从多个文件描述符同时读数据（阻塞模式），方式其中一个一直阻塞，而其他的则有很多数据得不到处理
		I/O多路转换：先构造一张有关描述符的列表，然后调用一个函数，直到这些描述符中的一个已准备好进行I/O时，才返回。返回时，告诉进程哪些描述符已准备好可以进行I/O
		poll，pselect和select这三个函数使我们能够执行I/O多路转换。
		int select(int maxfdp1, fd_set *restrict readfds, fd_set *restrict writefds, fd_set *restrict exceptfds, struct timeval *restrict tvptr);
		int poll(struct pollfd fdarray[], nfds_t nfds, int timeout);
	14.6 异步I/O
		在系统V派生的系统中，异步I/O只对STREAMS设备和STREAMS管道起作用。在BSD派生的系统中，异步I/O只对终端和网络其作用
		异步I/O的一个限制是每个进程只有一个信号。如果要对几个描述符进行异步I/O，那么在进程接收到信号时并不知道这一信号对应于哪一个描述符。
	14.7 readv && writev
		readv和writev函数用于在一次函数调用中读，写多个非连续缓冲区。
		ssize_t readv(int filedes, const struct iovec *iov, int iovcnt);
		ssize_t writev(int filedes, const struct iovec *iov, int iovcnt);
	14.8 readn && writen
		读写指定的n字节数据
		ssize_t readn(int filedes, void* buf, size_t nbytes);
		ssize_t writen(int filedes, void* buf, size_t nbytes);
	14.9 存储映射I/O
		存储映射I/O使一个磁盘文件与存储空间中的一个缓冲区相映射。
		void* mmap(void* addr, size_t len, int prot, int flag, int filedes, off_t off);
15 进程间通信
	15.2 管道
		两种局限性：
			1. 历史上，它们是半双工的（即数据只能在一个方向上流动）。现在，某些系统提供全双工管道，但是为了最佳的可移植性，我们绝不应预先假定系统提供此特性
			2. 它们只能在具有公共祖先的进程之间使用。通常，一个管道由一个进程创建，然后该进程调用fork，此后父，子进程之间就可以应用该管道。
		FIFO没有第二种局限，UNIX套接字和命名流管道则没有这两种局限。
		int pipe(int filedes[2]);
	15.3 popen和pclose函数
		创建一个管道，调用fork产生一个子进程，关闭管道的不使用端，执行一个shell以运行命令，然后等待命令终止。
		FILE* popen(const char* cmdstring, const char* type);
		int pclose(FILE* fp);
		popen特别适用于构造简单的过滤器程序
	15.4 协同进程
		当一个程序产生某个过滤程序的输入，同时又读取该过滤程序的输出时，则该过滤程序就成为协同进程
	15.5 FIFO
		有时FIFO被称为命名管道。
		int mkfifo(const char* pathname, mode_t mode);
		两种用途
			1. FIFO由shell命令使用以便将数据从一条管道线传送到另一条，为此无需创建中间零时文件
			2. FIFO用于客户进程-服务器进程应用程序中，以在客户进程和服务器进程之间传递数据。
	15.6 XSI IPC
		三种XSI IPC：消息队列，信号量，共享存储器
		key_t ftok(const char* path, int id);
		XSI IPC的主要问题：IPC结构是在系统范围内起作用的，没有访问计数。这些IPC结构在文件系统中没有名字。
	15.7 消息队列
		消息队列是消息的链接表，存放在内核中并由消息队列标识符标识。
	15.8 信号量
		信号量与管道，FIFO以及消息队列不同，它是一个计数器，用于多进程对共享数据对象的访问。
		多个进程共享一个资源，则可以使用信号量或记录锁。
	15.9 共享内存
		共享存储允许两个或更多进程共享一给定的存储区。因为数据不需要在客户进程和服务器进程之间复制，所以这是最快的一种IPC。
		int shmget(key_t key, size_t size, int flag)
		共享存储可由不相关的进程使用
	15.10 客户进程-服务器进程属性
16 网络IPC：套接字
	16.2 套接字描述
		int socket(int domain, int type, int protocol);
	16.3 寻址
		字节序：大端和小端字节序
			uint32_t htonl(uint32_t hostint32);
			uint16_t htons(uint16_t hostint16);
			uint32_t ntohl(uint32_t netint32);
			uint16_t ntohs(uint16_t netint16);
		地址格式
			为使不同格式地址能够被传入到套接字函数，地址被强制转换成通用的地址结构sockaddr
		地址查询
			struct hostent* gethostent(void);
			void sethostent(int stayopen);
			void endhostent(void);
			struct netent* getnetbyaddr(uint32_t net, int type);
			struct netent* getnetbyname(const char* name);
			struct netent* getnetent(void);
			void setnetent(int stayopen);
			void endnetent(void);
			struct protoent* getprotobyname(const char* name);
			struct protoent* getprotobynumber(int proto);
			struct protoent* getprotoent(void);
			void setprotoent(int stayopen);
			void endprotoent(void);
		将套接字与地址绑定
			int bind(int sockfd, const struct sockaddr *addr, socklen_t len);
	16.4 建立连接
		int connect(int sockfd, const struct sockaddr* addr, socklen_t len)
		int listen(int sockfd, int backlog);
		int accept(int sockfd, struct sockaddr *restrict addr, socklen_t *restrict len);
	16.5 数据传输
		ssize_t send(int sockfd, const void* buf, size_t nbytes, int flags)
		ssize_t sendto(int sockfd, const void* buf, size_t nbytes, int flags, const struct sockaddr *destaddr, socklen_t destlen);
		ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags)
	16.6 套接字选项
		设置选项和查询选项
	16.7 带外数据
		TCP支持带外数据，但UDP不支持。TCP将带外数据称为“紧急”数据。
	16.8 非阻塞和异步I/O
17 高级进程间通信
	17.2 基于STREAMS的管道
		基于STREAMS的管道是一个双向（全双工）管道。
		STREAMS机制提供了一种途径，使得进程可以给予管道一个文件系统中的名字
	17.3 UNIX域套接字
		int socketpair(int domain, int type, int protocol, int sockfd[2]);
	17.4 传送文件描述符
	17.5 open服务器版本1
18 终端I/O
	18.2 综述
		两种工作模式：规范模式输入处理和非规范模式输入处理
		终端I/O函数摘要  P511 表18-5
	18.3 特殊输入字符
	18.4 获得和设置终端属性
		int tcgetattr(int filedes, struct termios *termptr);
		int tcsetattr(int filedes, int opt, const struct termios *termptr);
	18.5 终端选项标志
	18.6 stty命令
		在命令行中可以用stty进行终端属性的查找和更改
	18.7 波特率函数
		speed_t cfgetispeed(const struct termios *termptr);
		speed_t cfgetospeed(const struct termios *termptr);
		int cfsetispeed(struct termios* termptr, speed_t speed);
		int cfsetospeed(struct termios* termptr, speed_t speed);
	18.8 行控制函数
	18.9 终端标识
		char* ctermid(char* ptr);
		int isatty(int filedes);
		char* ttyname(int filedes);
	18.10 规范模式
	18.11 非规范模式
	18.12 终端的窗口大小
	18.13 termcap, terminfo && curses
	18.10 规范模式
